// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum LinkType {
  Root = 0,
  Parent = 1,
  Continue = 2,

}

pub const ENUM_MIN_LINK_TYPE: u8 = 0;
pub const ENUM_MAX_LINK_TYPE: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for LinkType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for LinkType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const LinkType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const LinkType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for LinkType {
    type Output = LinkType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<LinkType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LINK_TYPE:[LinkType; 3] = [
  LinkType::Root,
  LinkType::Parent,
  LinkType::Continue
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_LINK_TYPE:[&'static str; 3] = [
    "Root",
    "Parent",
    "Continue"
];

pub fn enum_name_link_type(e: LinkType) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_LINK_TYPE[index as usize]
}

pub enum TraceDetailsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct TraceDetails<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TraceDetails<'a> {
    type Inner = TraceDetails<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> TraceDetails<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        TraceDetails {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args TraceDetailsArgs<'args>) -> flatbuffers::WIPOffset<TraceDetails<'bldr>> {
      let mut builder = TraceDetailsBuilder::new(_fbb);
      builder.add_cycles_per_second(args.cycles_per_second);
      builder.add_elapsed_ns(args.elapsed_ns);
      builder.add_start_time_ns(args.start_time_ns);
      if let Some(x) = args.span_sets { builder.add_span_sets(x); }
      builder.finish()
    }

    pub const VT_START_TIME_NS: flatbuffers::VOffsetT = 4;
    pub const VT_ELAPSED_NS: flatbuffers::VOffsetT = 6;
    pub const VT_CYCLES_PER_SECOND: flatbuffers::VOffsetT = 8;
    pub const VT_SPAN_SETS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn start_time_ns(&self) -> u64 {
    self._tab.get::<u64>(TraceDetails::VT_START_TIME_NS, Some(0)).unwrap()
  }
  #[inline]
  pub fn elapsed_ns(&self) -> u64 {
    self._tab.get::<u64>(TraceDetails::VT_ELAPSED_NS, Some(0)).unwrap()
  }
  #[inline]
  pub fn cycles_per_second(&self) -> u64 {
    self._tab.get::<u64>(TraceDetails::VT_CYCLES_PER_SECOND, Some(0)).unwrap()
  }
  #[inline]
  pub fn span_sets(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SpanSet<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<SpanSet<'a>>>>>(TraceDetails::VT_SPAN_SETS, None)
  }
}

pub struct TraceDetailsArgs<'a> {
    pub start_time_ns: u64,
    pub elapsed_ns: u64,
    pub cycles_per_second: u64,
    pub span_sets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<SpanSet<'a >>>>>,
}
impl<'a> Default for TraceDetailsArgs<'a> {
    #[inline]
    fn default() -> Self {
        TraceDetailsArgs {
            start_time_ns: 0,
            elapsed_ns: 0,
            cycles_per_second: 0,
            span_sets: None,
        }
    }
}
pub struct TraceDetailsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TraceDetailsBuilder<'a, 'b> {
  #[inline]
  pub fn add_start_time_ns(&mut self, start_time_ns: u64) {
    self.fbb_.push_slot::<u64>(TraceDetails::VT_START_TIME_NS, start_time_ns, 0);
  }
  #[inline]
  pub fn add_elapsed_ns(&mut self, elapsed_ns: u64) {
    self.fbb_.push_slot::<u64>(TraceDetails::VT_ELAPSED_NS, elapsed_ns, 0);
  }
  #[inline]
  pub fn add_cycles_per_second(&mut self, cycles_per_second: u64) {
    self.fbb_.push_slot::<u64>(TraceDetails::VT_CYCLES_PER_SECOND, cycles_per_second, 0);
  }
  #[inline]
  pub fn add_span_sets(&mut self, span_sets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<SpanSet<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TraceDetails::VT_SPAN_SETS, span_sets);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TraceDetailsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TraceDetailsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TraceDetails<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SpanSetOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SpanSet<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpanSet<'a> {
    type Inner = SpanSet<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SpanSet<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SpanSet {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SpanSetArgs<'args>) -> flatbuffers::WIPOffset<SpanSet<'bldr>> {
      let mut builder = SpanSetBuilder::new(_fbb);
      builder.add_start_time_ns(args.start_time_ns);
      builder.add_create_time_ns(args.create_time_ns);
      if let Some(x) = args.properties { builder.add_properties(x); }
      if let Some(x) = args.spans { builder.add_spans(x); }
      builder.finish()
    }

    pub const VT_CREATE_TIME_NS: flatbuffers::VOffsetT = 4;
    pub const VT_START_TIME_NS: flatbuffers::VOffsetT = 6;
    pub const VT_SPANS: flatbuffers::VOffsetT = 8;
    pub const VT_PROPERTIES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn create_time_ns(&self) -> u64 {
    self._tab.get::<u64>(SpanSet::VT_CREATE_TIME_NS, Some(0)).unwrap()
  }
  #[inline]
  pub fn start_time_ns(&self) -> u64 {
    self._tab.get::<u64>(SpanSet::VT_START_TIME_NS, Some(0)).unwrap()
  }
  #[inline]
  pub fn spans(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Span<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Span<'a>>>>>(SpanSet::VT_SPANS, None)
  }
  #[inline]
  pub fn properties(&self) -> Option<Properties<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Properties<'a>>>(SpanSet::VT_PROPERTIES, None)
  }
}

pub struct SpanSetArgs<'a> {
    pub create_time_ns: u64,
    pub start_time_ns: u64,
    pub spans: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Span<'a >>>>>,
    pub properties: Option<flatbuffers::WIPOffset<Properties<'a >>>,
}
impl<'a> Default for SpanSetArgs<'a> {
    #[inline]
    fn default() -> Self {
        SpanSetArgs {
            create_time_ns: 0,
            start_time_ns: 0,
            spans: None,
            properties: None,
        }
    }
}
pub struct SpanSetBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpanSetBuilder<'a, 'b> {
  #[inline]
  pub fn add_create_time_ns(&mut self, create_time_ns: u64) {
    self.fbb_.push_slot::<u64>(SpanSet::VT_CREATE_TIME_NS, create_time_ns, 0);
  }
  #[inline]
  pub fn add_start_time_ns(&mut self, start_time_ns: u64) {
    self.fbb_.push_slot::<u64>(SpanSet::VT_START_TIME_NS, start_time_ns, 0);
  }
  #[inline]
  pub fn add_spans(&mut self, spans: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Span<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpanSet::VT_SPANS, spans);
  }
  #[inline]
  pub fn add_properties(&mut self, properties: flatbuffers::WIPOffset<Properties<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Properties>>(SpanSet::VT_PROPERTIES, properties);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpanSetBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpanSetBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpanSet<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PropertiesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Properties<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Properties<'a> {
    type Inner = Properties<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Properties<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Properties {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PropertiesArgs<'args>) -> flatbuffers::WIPOffset<Properties<'bldr>> {
      let mut builder = PropertiesBuilder::new(_fbb);
      if let Some(x) = args.payload { builder.add_payload(x); }
      if let Some(x) = args.lens { builder.add_lens(x); }
      if let Some(x) = args.span_ids { builder.add_span_ids(x); }
      builder.finish()
    }

    pub const VT_SPAN_IDS: flatbuffers::VOffsetT = 4;
    pub const VT_LENS: flatbuffers::VOffsetT = 6;
    pub const VT_PAYLOAD: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn span_ids(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(Properties::VT_SPAN_IDS, None)
  }
  #[inline]
  pub fn lens(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(Properties::VT_LENS, None)
  }
  #[inline]
  pub fn payload(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Properties::VT_PAYLOAD, None).map(|v| v.safe_slice())
  }
}

pub struct PropertiesArgs<'a> {
    pub span_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u16>>>,
    pub lens: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u16>>>,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for PropertiesArgs<'a> {
    #[inline]
    fn default() -> Self {
        PropertiesArgs {
            span_ids: None,
            lens: None,
            payload: None,
        }
    }
}
pub struct PropertiesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PropertiesBuilder<'a, 'b> {
  #[inline]
  pub fn add_span_ids(&mut self, span_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Properties::VT_SPAN_IDS, span_ids);
  }
  #[inline]
  pub fn add_lens(&mut self, lens: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Properties::VT_LENS, lens);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Properties::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PropertiesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PropertiesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Properties<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SpanOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Span<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Span<'a> {
    type Inner = Span<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Span<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Span {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SpanArgs) -> flatbuffers::WIPOffset<Span<'bldr>> {
      let mut builder = SpanBuilder::new(_fbb);
      builder.add_elapsed_cycles(args.elapsed_cycles);
      builder.add_begin_cycles(args.begin_cycles);
      builder.add_event(args.event);
      builder.add_link_id(args.link_id);
      builder.add_id(args.id);
      builder.add_link_type(args.link_type);
      builder.finish()
    }

    pub const VT_LINK_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_ID: flatbuffers::VOffsetT = 6;
    pub const VT_LINK_ID: flatbuffers::VOffsetT = 8;
    pub const VT_EVENT: flatbuffers::VOffsetT = 10;
    pub const VT_BEGIN_CYCLES: flatbuffers::VOffsetT = 12;
    pub const VT_ELAPSED_CYCLES: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn link_type(&self) -> LinkType {
    self._tab.get::<LinkType>(Span::VT_LINK_TYPE, Some(LinkType::Root)).unwrap()
  }
  #[inline]
  pub fn id(&self) -> u16 {
    self._tab.get::<u16>(Span::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn link_id(&self) -> u16 {
    self._tab.get::<u16>(Span::VT_LINK_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn event(&self) -> u32 {
    self._tab.get::<u32>(Span::VT_EVENT, Some(0)).unwrap()
  }
  #[inline]
  pub fn begin_cycles(&self) -> u64 {
    self._tab.get::<u64>(Span::VT_BEGIN_CYCLES, Some(0)).unwrap()
  }
  #[inline]
  pub fn elapsed_cycles(&self) -> u64 {
    self._tab.get::<u64>(Span::VT_ELAPSED_CYCLES, Some(0)).unwrap()
  }
}

pub struct SpanArgs {
    pub link_type: LinkType,
    pub id: u16,
    pub link_id: u16,
    pub event: u32,
    pub begin_cycles: u64,
    pub elapsed_cycles: u64,
}
impl<'a> Default for SpanArgs {
    #[inline]
    fn default() -> Self {
        SpanArgs {
            link_type: LinkType::Root,
            id: 0,
            link_id: 0,
            event: 0,
            begin_cycles: 0,
            elapsed_cycles: 0,
        }
    }
}
pub struct SpanBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpanBuilder<'a, 'b> {
  #[inline]
  pub fn add_link_type(&mut self, link_type: LinkType) {
    self.fbb_.push_slot::<LinkType>(Span::VT_LINK_TYPE, link_type, LinkType::Root);
  }
  #[inline]
  pub fn add_id(&mut self, id: u16) {
    self.fbb_.push_slot::<u16>(Span::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_link_id(&mut self, link_id: u16) {
    self.fbb_.push_slot::<u16>(Span::VT_LINK_ID, link_id, 0);
  }
  #[inline]
  pub fn add_event(&mut self, event: u32) {
    self.fbb_.push_slot::<u32>(Span::VT_EVENT, event, 0);
  }
  #[inline]
  pub fn add_begin_cycles(&mut self, begin_cycles: u64) {
    self.fbb_.push_slot::<u64>(Span::VT_BEGIN_CYCLES, begin_cycles, 0);
  }
  #[inline]
  pub fn add_elapsed_cycles(&mut self, elapsed_cycles: u64) {
    self.fbb_.push_slot::<u64>(Span::VT_ELAPSED_CYCLES, elapsed_cycles, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpanBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpanBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Span<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_trace_details<'a>(buf: &'a [u8]) -> TraceDetails<'a> {
  flatbuffers::get_root::<TraceDetails<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_trace_details<'a>(buf: &'a [u8]) -> TraceDetails<'a> {
  flatbuffers::get_size_prefixed_root::<TraceDetails<'a>>(buf)
}

#[inline]
pub fn finish_trace_details_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TraceDetails<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trace_details_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TraceDetails<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
